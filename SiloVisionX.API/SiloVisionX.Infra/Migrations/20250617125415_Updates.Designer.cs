// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiloVisionX.Infra;

#nullable disable

namespace SiloVisionX.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250617125415_Updates")]
    partial class Updates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SiloVisionX.Domain.Models.Geral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<float>("PesoValue")
                        .HasColumnType("real");

                    b.Property<float>("TemperaturaValue")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("UmidadeValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Geral", "Silo");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Peso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeralId")
                        .HasColumnType("int");

                    b.Property<float>("PesoValue")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeralId");

                    b.ToTable("Peso", "Silo");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Roles", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Roles", "Auth");

                    b.HasData(
                        new
                        {
                            Name = "ADMIN",
                            Description = "Administrador"
                        },
                        new
                        {
                            Name = "USER",
                            Description = "Usuário"
                        });
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Temperatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeralId")
                        .HasColumnType("int");

                    b.Property<float>("TemperaturaValue")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeralId");

                    b.ToTable("Temperatura", "Silo");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Token", "Auth");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Umidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeralId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("UmidadeValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GeralId");

                    b.ToTable("Umidade", "Silo");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Role");

                    b.ToTable("Usuários", "Auth");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Peso", b =>
                {
                    b.HasOne("SiloVisionX.Domain.Models.Geral", "Geral")
                        .WithMany()
                        .HasForeignKey("GeralId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Geral");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Temperatura", b =>
                {
                    b.HasOne("SiloVisionX.Domain.Models.Geral", "Geral")
                        .WithMany()
                        .HasForeignKey("GeralId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Geral");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Token", b =>
                {
                    b.HasOne("SiloVisionX.Domain.Models.User", "UserEmail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserEmail");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.Umidade", b =>
                {
                    b.HasOne("SiloVisionX.Domain.Models.Geral", "Geral")
                        .WithMany()
                        .HasForeignKey("GeralId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Geral");
                });

            modelBuilder.Entity("SiloVisionX.Domain.Models.User", b =>
                {
                    b.HasOne("SiloVisionX.Domain.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
